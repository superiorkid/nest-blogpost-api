generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  ADMIN
  USER
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String?
  avatar    String?
  role      Role       @default(USER)
  profile   Profile?
  followers Follows[]  @relation("following")
  following Follows[]  @relation("follower")
  accounts  Account[]
  posts     Post[]
  saved     Bookmark[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([email])
}

model Account {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerType String
  providerId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Profile {
  id           String    @id @default(cuid())
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName    String
  lastName     String?
  mobileNumber String?   @unique
  gender       Gender?
  birthOfDate  DateTime?
}

model Post {
  id        String        @id @default(cuid())
  authorId  String
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  title     String
  slug      String        @unique
  summary   String
  body      String        @db.Text
  cover     String
  tags      TagsOnPosts[]
  bookmarks Bookmark[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([title, slug])
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  posts TagsOnPosts[]
}

model TagsOnPosts {
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int
  assignedAt DateTime @default(now())

  @@id([postId, tagId])
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@id([followerId, followingId])
}

model Bookmark {
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  assignedAt DateTime @default(now())

  @@id([userId, postId])
}
